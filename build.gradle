import java.text.SimpleDateFormat

buildscript {
	repositories {
		// These repositories are only for Gradle plugins, put any other repositories in the repository block further below
		maven { url = 'https://maven.minecraftforge.net' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
//apply plugin: 'maven'
//apply plugin: 'maven-publish'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.17.1-37.0.5'
}

final def date = new Date()
final def dailyVersion = (new SimpleDateFormat("yyyy-MM-dd-hh-mm-ss")).format(date)

version = dailyVersion
group = "rikka.librikka" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "LibRikka"

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.17.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                librikka {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                librikka {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'librikka', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                librikka {
                    source sourceSets.main
                }
            }
        }
    }
}

jar.version = version
jar {
    manifest {
        attributes([
                "Specification-Title": "librikka",
                "Specification-Vendor": "CISM",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"CISM",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def libsDir = new File(System.getenv("LIBS_DIR") ?: "build/libs/")

task deobfJar(type: Jar) {
    destinationDir = libsDir
    from sourceSets.main.output
    manifest = jar.manifest
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    destinationDir = libsDir
    from sourceSets.main.allSource
    classifier "src"
}

artifacts {
    archives deobfJar
    archives sourceJar
}



/*
publishing {
    publications {
        JarPublication(MavenPublication) {
            from components.java

            artifact deobfJar
        }

        SrcPublication(MavenPublication) {
            from components.java

            artifact sourceJar
        }
    }

    repositories {
        maven {
            url "$buildDir/repo"
        }
    }
}
*/
